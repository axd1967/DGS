
-----------------
General instructions for developers:
-----------------

----------------- CVS, filenames, database names:

   Don't use uppercase letters in the filenames (unless a special needed
   meaning). In such cases, contact the other developers first.
   The developers using MS Window systems may not be able to distinguish
   filenames different only in their upper- and lower-case letters.

   The same constraint appears with the database name and its tables names.
   Actually, those names contain uppercase letters. That is not a problem
   until one does not insert an other object with the same name except the
   case (e.g. the two tables: Forum and forum).
   On the other hand, the column, variable and alias names seem to be well
   handled in a case sensitive way under the MS Windows systems.


----------------- PHP, Layout:

   Try to keep an homogeneous code presentation.

   -Use a 3 real spaces tabing.
   -CR, LF or CR+LF should not cause problem.
   -Keep the files Ansi (don't use utf-8 encoding)
   -Instead of:
      if ( c!=0 ) exit;
      if ( a!=0 ) {
         ...
      } else {
         ...
      }
   use:
      if( c!=0 )
         exit;
      if( a!=0 )
      {
         ...
      }
      else
      {
         ...
      }


----------------- PHP, Database:

   Try to avoid the extract($row) function. Or just use it inside a
   short function. At top level, the values of $row become global
   variables. This is really risky. Even inside a function, as the $row
   come most of the time from a mysql_query("SELECT *,..."), if we add
   a column to the database table, the resulting var will maybe disturb
   your code.

   We know that there is still a lot of extract() in our code but we are
   working to remove them. Instead we clearly rename the $row var with,
   let say, $game_row then we use $game_row['ID'] when needed.
   Feel free to replace in such way any extract() that you find.

   This is a query issued from some bad experiences.


----------------- PHP, URL:

   Take care of URI_AMP and URI_AMP_IN.
   - URI_AMP_IN is what you use when you decode an URL coming
      from the server (e.g. $_SERVER['REQUEST_URI']).
   - Use URI_AMP when you build a URL to be gave to the server.
   In short, URI_AMP_IN = ini_get('arg_separator.input')
         and URI_AMP    = ini_get('arg_separator.output')

   This is because the ampersand is not allowed in an URL (curiously!)
   Some server replace it with a ';' but it seems that, now a day, the
   '&amp;' become the standard. When the server receive a '&amp;', it
   translate it with a '&'. But this is purely server dependant. We even
   can't be sure that it is a one char string. So use:
      if( substr($str, -strlen(URI_AMP)) != URI_AMP )
         $str .= URI_AMP;
   instead of:
      if( substr($str, -1, 1) != URI_AMP )
         $str .= URI_AMP;

   By the way, make_url($page, array()) is a function that works fine
   if $page is already a well formed URL and is safer because it use
   an urlencode().


----------------- PHP, DGS, Translations:

   Take care of the T_() function and tranlation features.

   Use the T_() enclosure each time that the string need a
   translation. Don't use such an enclosure anywhere else: most
   of the PHP files are scanned to find it and so, the strings
   to translate.

   During the scan process, the $TranslateGroups[] var at the top of
   some files is used too. As of the TranslationPages table in the
   database. These are the two places to modify when you add a new
   PHP file containing T_() translations. As a start point, have a
   look at the README.translations file in the scripts folder.

   When adding a new string, try to first find if a similar one
   already exist in the database.

   Maybe this is not the better way to do the translations but
   it is hard to modify it. Any suggestion?


----------------- PHP, Database:

   Even if $num is numeric, think to use the quoted syntaxe to set it
   in a MySQL query, e.g. $query = ... "Num='$num'," ...;
   If $num is not set and if the Num column is numeric, Num='', will set
   it to the default while Num=, will return a MySQL syntaxe error.
   That's an alternative that must be known.


----------------- PHP:

   [Source: http://www.php.net/manual/en/language.references.return.php]
   If you try to return a reference from a function with the syntax:

      return ($found_var);

   this will not  work as you are attempting to return the result of an
   expression, and not a variable, by reference. You can only return
   variables by reference from a function - nothing else.

   For example:
   Operator "(expr) ? A : B" returns a copy of A|B and not a reference

   $this->value{$pos} with var-pos DOES NOT WORK in all cases for
   unknown reason! For example, it doesn't work when filter resetted or
   not initialized yet !! ok with const so far!


----------------- PHP, URL:

   Question:
      Regarding String-comparison the code sometimes fails, if you compare
      a string with '=='. Comparing a string against a constant-String
      with '===' is more reliable, but sometimes it also works with '=='.

      That really puzzles me.
      Do you have any clarification on that effect?
      Or is it maybe better to use strcmp()?

   Answer (Rod):
      That's not always obvious. The problem is because PHP is a "not typed"
      language (contrary to C, for instance). So PHP is doing again and again
      hidden cast-ings.

      There is too a problem, for instance, with the strpos() function.
      It may return false if nothing is found, or 0 if something is found at
      index 0. So you have to use: "if( false === strpos(...) )"
      to know is something is found because: "if( false == strpos(...) )"
      will also be true when the function returns the 0 index, as
      false may be cast-ed to 0, and 0 to false.

      Another example with those lines:
         $v = "-1.25"; // $v is a string
         $v = 0 + $v;  // now $v is a float
         if( $v < -1 ) // true if $v is a float

         True if $v is a float because PHP will cast (int)-1 to (float)-1.
         But if you remove/comment the second line, the test MAY be false.

         In fact, to compare two entities, PHP need to cast them to the same type.
         Here, if the second line is absent, PHP had to compare an integer (-1)
         and a string ("-1.25"). But we can't know if PHP will cast -1 to "-1"
         or "-1.25" to -1.25. If it cast -1 to "-1", the test will be:
         if( "-1.25" < "-1" ) and be false because of the lengths difference.

      As you can see, the problem is not only around a comparison.

      So, as the typage is extremly volatile in PHP, don't hesitate to add
      security casts when needed:

         if( ((float)$v) < -1 ) // true even if $v is a string

      Effectively, I think that strcmp() may be the solution to compare the
      values as strings, because it should do by definition.

      In the same spirit, be aware that everything that come from an URI or
      a cookie IS a string (e.g. with "game.php?gid=1234", $_GET['gid'] will
      always return the string "1234"). It act as an int only when you
      implicitly use it as an integer.
      So a preventive cast each time you use a $_GET is a good thing too.


----------------- PHP:

   Depending on the context the following expression does fail to work as
   expected because of the same reason as described in the URL-section.
   The reason is propably a bad implicit casting used by PHP.

   The expression    ( $value != '' )   sometimes results in an unexpected
   FALSE-value if the $value is '0'. Better use the following expression,
   that will work as expected:

      ( (string)$value != '' )


----------------- PHP, Using translations in libraries/classes:

   For using translated text with  T_('some text')  first the current
   player_row has to be loaded to determine the players language-setting.
   That allows the  T_(..)  only to be used during execution time when
   the player-information has been loaded.

   That may need lazy-initialization for some translated texts.
   Also keep in mind, that applying the T_()-func later does not work,
   as then the text is not included in the database for translation!

   That means, that you can't dynamically create a string within
   the T_(string)-func. To accomplish that, you have to use
   a sprintf-like-string, for example:

      T_("Take $cnt apples")    // does NOT work

      sprintf( T_('Take %d apples'), $cnt)  // use THIS instead


----------------- PHP: About using 'and/or' vs. '&&/||'

   In logical expressions, always use '&&' and '||' instead
   of 'and' and 'or'. That's because in combination with
   assignments, the '=' has higher precedence than the
   logical operator, which often ends in a wrong result.

      $res = $a && $b && $c;   // USE THIS
      $res = $a and $b and $c; // do NOT use this

   PHP-Docs:
   http://de2.php.net/manual/en/language.operators.php#language.operators.precedence

   The 'and' and '&&' does not have the same precedence facing
   the assignment operator(s) and the '?:' operator.

      $res = true and false;  <=>  $res = true) and (false);

   so $res results in true (not in false as you might have expected).

      $res = true && false;   <=>  $res = (true && false);

   The above shows the correct behaviour and will return $res == false.

   The literal 'and/or' are to be used when combined with a command
   like in the following cases (depending on the expression result):

      $res = $expr and die();   // die()   is executed if expression is false

      $res = $expr or error();  // error() is executed if expression is true


----------------- PHP: list( ...) = $array

   Never reuse variables as source and destination in the same command line.
   One example is:

      list( $var1, $varAGAIN, $var3 ) = $varAGAIN;

   To the nature of the list()-func, this will fail.
   See PHP-Docs (Notes with red-boxed Warning):
      http://de2.php.net/manual/en/function.list.php


----------------- DGS-convention, SQL-aliases

   DGS-convention:
   When using field-aliases in SQL-statements applying some formula
   on the field use an alias with the prefix 'X_'.

   Example:
      SELECT Moves, Moves/2 AS X_HalfMoves FROM Games


----------------- PHP: Constant Strings

   Constant strings should be written as  'string'  instead of  "string".
   This can be processed faster by PHP.


----------------- PHP: Faster String output with echo

   Echo can work faster, if output strings are concattenated
   using ',' (arg separator) instead of '.' (string concat).

-----------------


