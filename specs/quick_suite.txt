# Topic: Quick-Suite
# Description: Alternative interface to DGS operations
# FAQ (robot-interface): http://www.dragongoserver.net/faq.php?read=t&cat=215#Entry219
# Forum-discussions:
# - http://www.dragongoserver.net/forum/read.php?forum=10&thread=27755
# Author: Jens-Uwe Gaspar, DGS 'juga'

## /*
## Dragon Go Server
## Copyright (C) 2001-2010  Erik Ouchterlony, Jens-Uwe Gaspar
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU Affero General Public License as
## published by the Free Software Foundation, either version 3 of the
## License, or (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Affero General Public License for more details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
## */


Topics:

   1. Introduction
   2. Login, Request and Response
   3. Objects
      a. "game" - playing a started game
      b. "user" - user info
   4. Classes and Files
   5. Possible Future Enhancements


#-------- (1) Introduction ----------------------------------------------------

The Quick-Suite provides an alternative interface to the DGS objects and operations.
It accepts generic-formatted input and results in a JSON-formatted output.

DGS "objects" represent different sections of the server:

   - user         : users, contacts, player, profile
   - game-offer   : waitingroom, invitation
   - game         : playing game, game-info
   - message
   - forum        : forums, threads, posts
   - help         : FAQ

Each "object" has a different set of "commands", than can be executed to get
information about the "object" or perform operations on the "object".



#-------- (2) Login, Request and Response -------------------------------------

A "command" is sent to the server via a GET or POST HTTP-request. The response is
sent back with MIME-type "application/json" and contains the respective result
for the requests command. The quick-script always expects a login-cookie in the
HTTP-headers for authentication, which can be created with:

   login.php?quick_mode=1&userid=HANDLE&passwd=PASSWORD

Authentication is one purpose, the other is to allow an user-based quota (and for
that the user must be known and must be authenticated to avoid abuse).

The standard request format looks like:

   quick_do.php?obj=<OBJNAME>&cmd=<COMMAND>&arg=...


The standard minimal response is a JSON-formatted text with an error-code,
there can be an optional 'error_msg' element:

   {
      "error": "error_code",
      "error_msg": "error message"
   }

An empty 'error_code' indicates a successful operation, i.e. no errors have occured:

   {
      "error": ""
   }

The response may contain additional object- and command-specific return-values.

   {
      "error": "",
      "Output1": ... ,
      "Output2": ...
   }


References:
   * JSON - RFC 4627 - The application/json Media Type for JavaScript Object Notation (JSON)
     http://tools.ietf.org/html/rfc4627
     http://en.wikipedia.org/wiki/Json


#-------- (3) Objects ---------------------------------------------------------

The currently supported DGS "objects" are:

   a) "game" - playing a started game, game-info
   b) "user" - user info

#-------- (3a) Objects - "game" -----------------------------------------------

Request:

   quick_do.php?obj=game&cmd=<COMMAND>&gid=<GAME_ID>&move_id=<MOVE_ID>&move=<MOVES>&msg=<MESSAGE>

Options:

   <COMMAND> = "delete" | "set_handicap" | "move" | "resign" | "status_score" | "score" | "info"

   <GAME_ID> = integer
      - reference game to perform game-operation on

   <MOVE_ID> = context for move
      - move_id = current DGS-move-number as stored in db in Games.Moves,
        which also counts in handicap-stones and pass/scoring-"moves".

        Providing context for game-operation to avoid errorneous states like:
        - (a) multi-players account with simultaneous logins or
        - (b) (duplicate move commitment) if one player hit twice the validation button
          during a net lag, and/or
        - (c) if the opponent had already played between the two calls

   <MOVES> = move | moves | "pass"
      - move = single move-coordinate in specified mode-format
      - moves = list of coordinates in specified mode-format in comma-separated string,
        e.g. "bc,pq,mo,eq" (sgf) or "b17,q3,n5,e3" (label)

      - there are two mode-formats:
          - moves are given in SGF-coordinates, e.g. "bc",
            specified in http://www.red-bean.com/sgf/go.html
            This is also used as default if the mode-format could not be determined.

          - moves are given in board-coordinates (labels), e.g. "b17"
            be aware, that board-coordinates skip the 'i'-character

   <MESSAGE> = message
      - optional game-message on game-operation


Commands:

   "delete" : deletes specified game
      - required opts: GAME_ID, MOVE_ID
      - optional opts: MESSAGE

   "set_handicap" : sets handicap stones at start of game
      - required opts: GAME_ID, MOVE_ID, MOVE
         - MOVE = moves : list of coordinates of the handicap-stone placement
      - optional opts: MESSAGE

   "move" :
      - required opts: GAME_ID, MOVE_ID, MOVES
         - MOVES = move : single move to submit, move="pass" for passing move
      - optional opts: MESSAGE

   "resign" : resigns specified game
      - required opts: GAME_ID, MOVE_ID
      - optional opts: MESSAGE

   "status_score" : verify final game-score
      - required opts: GAME_ID, MOVE_ID, MOVE
         - MOVE = coords : list of coordinates that 'state' should be "switched"
      - optional opts: MESSAGE -> will be ignored

      - Result (JSON) =
         {
            "score" : "0" | "W+7" | "B+2.5", # 0=jigo
            "board_status" : {
               "dame"            : "...", # coords*
               "neutral"         : "...", # coords* (switchable)
               "white_stones"    : "bc,...", # coords*
               "black_stones"    : "aa,...", # coords*
               "white_dead"      : "...", # coords*
               "black_dead"      : "...", # coords*
               "white_territory" : "...", # coords*
               "black_territory" : "...", # coords*
            }
         }

      - Errors:
         - invalid_action : if game not in scoring-status
         - invalid_switch : if state of coordindate can not be switched

   "score" : assess dead/alive-status of stones, submitting score
      - required opts: GAME_ID, MOVE_ID, MOVE
         - MOVE = coords : list of coordinates that 'state' should be "switched"
      - optional opts: MESSAGE

   "info" : retrieve game-information
      - required opts: GAME_ID

      - Result (JSON) =
         {
            "id" : "123456", # game-id
            "double_id" : "0", # > 0 if double-game, < 0 if double-game deleted
            "tournament_id" : "0", # tournament-id > 0 if game is part of tournament
            "status" : "PLAY", # game-status: "" | PLAY | PASS | SCORE | SCORE2 | FINISHED
            "flags" : "HIDDENMSG", # flags (comma-separated): HIDDENMSG (game contains hidden-messages)
            "score" : "", # score for finished game only (same format as for status_score-command above)

            "rated" : "1", # 0=unrated, 1=rated
            "ruleset" : "JAPANESE", # ruleset: JAPANESE | CHINESE
            "size" : "19", # board-size
            "komi" : "6.5", # komi
            "handicap" : "0", # handicap-stones
            "handicap_mode" : "FREE", # STD=standard-handicap, FREE=free-handicap

            "time_started" : "YYYY-MM-DD hh:mm:ss", # game started time
            "time_lastmove" : "YYYY-MM-DD hh:mm:ss", # last-moved (also game-end-time if finished)
            "time_weekend_clock" : "1", # 1=time-running on weekend, 0=otherwise
            "time_mode" : "CAN", # time-mode: FIS=Fischer-time, JAP=japanese-time, CAN=canadian-time
            "time_limit" : "C: 14d + 15d / 8", # initial time-settings for game (like notation in waiting-room)

            "move_id" : "75", # move-id, required as context for playing via game-quick-suite
            "move_color" : "B", # B=black-to-move, W=white-to-move
            "move_uid" : "111", # user-id to move next
            "move_last" : "bc", # SGF-format of last-move ("" for non-board-move, e.g. pass/scoring)
            "move_ko" : "0", # 1=ko, 0=no-ko in last-move

            "black_uid" : "111", # black-user-id
            "black_prisoners" : "3", # black-prisoners
            "black_remtime" : "C: 1d 10h (+ 15d / 8)", # black remaining-time (same format as for quick-status)
            "black_rating_start" : "3k (-7%)", # black start-rating
            "black_rating_start_elo" : "1792.59326171875", # black start-rating ELO
            "black_rating_end" : "3k (-7%)", # black end-rating (after game finished)
            "black_rating_end_elo" : "1792.59326171875", # black start-rating ELO (after game finished)

            "white_uid" : "222", # white-user-id
            "white_prisoners" : "3", # white-prisoners
            "white_remtime" : "C: 1d 10h (+ 15d / 8)", # white remaining-time (same format as for quick-status)
            "white_rating_start" : "3k (-7%)", # white start-rating
            "white_rating_end" : "3k (-7%)", # white end-rating (after game finished)
            "white_rating_elo_start" : "1792.59326171875", # white start-rating ELO
            "white_rating_elo_end" : "1792.59326171875", # white start-rating ELO (after game finished)
         }

      - Errors:
         - unknown_game : invalid game on DGS


Possible errors:
   "" : operation successful

   //TODO Known errors from current implementation 'confirm.php' and 'quick_play.php':
   //TODO => adjust it for new 'quick_do.php'
      # errors from (old) 'quick_play.php'
      already_played
      database_corrupted
      game_finished
      game_not_started
      illegal_position
      internal_error
      invalid_action
      login_denied
      move_problem
      mysql_insert_move
      mysql_query_failed
      mysql_update_game
      no_game_nr
      not_logged_in
      not_your_turn
      unknown_game

      # additional errors from 'confirm.php'
      confirm_add_time
      early_pass
      mysql_insert_message
      opponent_not_found
      wrong_number_of_handicap_stone

---
   mysql_query_failed   - db load error
   login_denied - login denied
   fever_vault - login
   receiver_not_found - login, on sending msg
   internal_error - login, on sending msg
   mysql_insert_message - login, on sending msg
   mail_failure - login, on sending mail
   server_down

   invalid_command
   invalid_args
   unknown_game
   game_not_started
   game_finished

Examples of game-playing cycle:

   # login setting cookie in HTTP-header storing: handle, sessioncode
   login.php?quick_mode=1&userid=user&passwd=userpassword

   # retrieve list of games to play in
   # (syntax given in commented line starting with '# comment')
   quick_status.php
   quick_status.php?user=user
   quick_status.php?uid=123

   # download game with moves
   # - marked-dead-stones stored in MA-property
   # - move_id stored in XM-private-property
   # - other game-parameters
   #
   # parameters:
   #    quick_mode=0|1       : 1 = ignore errors
   #    gid=1234|game1234    : game-id
   #    no_cache=0|1         : 1 = disable cache (expire-header)
   #    owned_comments=0|1|N : 1 = if set try to return private comments (for players only) including private notes on game,
   #                           0 = return only public comments
   #                           N = return NO comments or notes
   #    inline=0|1           : 1 = use Content-Disposition type of "inline" to directly start assigned application
   #    bulk=0|1             : 1 = use special filename-pattern (omit handicap if =0 and result if unfinished game):
   #                           DGS-<gid>_YYYY-MM-DD_<rated=R|F><size>(H<handi>)K<komi>(=<result>)_<white>-<black>.sgf
   sgf.php?gid=12345&owned_comments=1&quick_mode=1


   # (optional) setting handicap stones
   quick_do.php?obj=game&cmd=set_handicap&gid=12345&move_id=0&move=q16,b4&msg=Onegaishimasu

   # (first) regular move (move_id=0)
   quick_do.php?obj=game&cmd=move&gid=12345&move_id=0&move=q3

   # regular move
   quick_do.php?obj=game&cmd=move&gid=12345&move_id=1&move=c17

   # pass moves
   quick_do.php?obj=game&cmd=move&gid=12345&move_id=2&move=pass
   quick_do.php?obj=game&cmd=move&gid=12345&move_id=3&move=pass


   # scoring-phase: verify score & assess dead/alive-status
   quick_do.php?obj=game&cmd=status_score&gid=12345&move_id=4
   quick_do.php?obj=game&cmd=status_score&gid=12345&move_id=4&move=c17,q3
   quick_do.php?obj=game&cmd=score&gid=12345&move_id=4&move=c17,q3

   # scoring-phase: verify score + disagree on score
   quick_do.php?obj=game&cmd=status_score&gid=12345&move_id=5
   quick_do.php?obj=game&cmd=score&gid=12345&move_id=5&move=q16,d4

   # scoring-phase: verify score + agree on score
   quick_do.php?obj=game&cmd=status_score&gid=12345&move_id=5
   quick_do.php?obj=game&cmd=score&gid=12345&move_id=5&move=

   # scoring-phase: resume playing (on disagreement)
   quick_do.php?obj=game&cmd=status_score&gid=12345&move_id=5
   quick_do.php?obj=game&cmd=move&gid=12345&move_id=5&move=r14


   # resign
   quick_do.php?obj=game&cmd=resign&gid=12345&move_id=6


   # delete (only on first 10 moves)
   quick_do.php?obj=game&cmd=delete&gid=12345&move_id=6


#-------- (3b) Objects - "user" -----------------------------------------------

Request:

   quick_do.php?obj=user&cmd=<COMMAND>&uid|user=<USER_ID|HANDLE>

Options:

   <COMMAND> = "info"

   <USER_ID> = integer
   <USER_HANDLE> = string
      - reference user to perform user-operation on
        - USER_ID is the unique user-id, e.g. http://www.dragongoserver.net/userinfo.php?uid=1
        - USER_HANDLE is the unique user-id, e.g. http://www.dragongoserver.net/userinfo.php?user=guest


Commands:

   "info" : returns public user-info
      - required opts: USER_ID|HANDLE

      - Result (JSON) =

         {
            "id" : 1,                  # USER_ID
            "handle" : "guest",        # USER_HANDLE
            "type" : "",               # user types (comma-separated): pro teacher bot
            "name" : "name",           # user name
            "country" : "se",          # DGS country-code, e.g. http://www.dragongoserver.net/images/flags/se.gif
            "vacation_left" : "25",    # vacation days left
            "vacation_on" : "2d 7h",   # on-vacation ("" = not-on vac.)
            "register_date" : "YYYY-MM-DD",     # register-date
            "last_access" : "YYYY-MM-DD hh:mm:ss", # date of last access (website; in users time-zone; can be empty)
            "last_move" : "YYYY-MM-DD hh:mm:ss",   # date of last move (in users time-zone; can be empty)
            "rating_status" : "RATED",         # NONE | INIT | RATED
            "rating" : "5k (+46%)",            # DGS rating | ""
            "rating_elo" : "1643.88952636719", # DGS elo-rating | ""
            "rank" : "5k EGF",                 # user rank-info (contains HTML)
            "open_match" : "ask later",        # user open-for-match-info (contains HTML)
            "games_running" : "5",   # number of running games
            "games_finished" : "50", # number of finished games
            "games_rated" : "10",    # number of (finished) rated games
            "games_won" : "8",       # number of (finished rated) won games
            "games_lost" : "2",      # number of (finished rated) lost games
         }

      - Errors:
         - invalid_args : bad parameters (missing user-id)
         - unknown_user : unknown user-id specified


Examples of game-playing cycle:

   # login setting cookie in HTTP-header storing: handle, sessioncode
   login.php?quick_mode=1&userid=user&passwd=userpassword

   # retrieve user-info
   quick_do.php?obj=user&cmd=info&user=guest


#-------- (4) Classes and Files -----------------------------------------------

This section shortly describes the framework-classes and files in use.
For more details you may also check the source-code documentation of the classes,
their variables and functions.

   - quick_do.php:
     Facade to quick-suite to delegate commands on objects to quick-handlers.

   - include/quick/...
     Containing all quick-handlers.


#-------- (5) Possible Future Enhancements ------------------------------------
# Priority (1=high, 5=low, ?=unknown) is added, e.g. Prio(1)

This section outlines some ideas that came to mind regarding the quick-suite,
but are not necessarily going to be implemented (soon or at all).


* Prio(?): add more handlers for remaining DGS objects and operations


