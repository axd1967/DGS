###
### Description of mysql tables:  GamesPriority
###

###########################################################################
## --- Games ---

Description:
   Table to store static and dynamic information about game.
   - store invited game, running game, finished game

| Field              | Type                                                              | Null | Key | Default             | Extra          |
+--------------------+-------------------------------------------------------------------+------+-----+---------------------+----------------+
| ID                 | int(11)                                                           | NO   | PRI | NULL                | auto_increment |
| tid                | int(11)                                                           | NO   | MUL | 0                   |                |
| Starttime          | datetime                                                          | NO   |     | 0000-00-00 00:00:00 |                |
| Lastchanged        | datetime                                                          | NO   | MUL | 0000-00-00 00:00:00 |                |
| mid                | int(11)                                                           | NO   |     | 0                   |                |
| DoubleGame_ID      | int(11)                                                           | NO   |     | 0                   |                |
| Black_ID           | int(11)                                                           | NO   | MUL | NULL                |                |
| White_ID           | int(11)                                                           | NO   | MUL | NULL                |                |
| ToMove_ID          | int(11)                                                           | NO   | MUL | 0                   |                |
| GameType           | enum('GO','TEAM_GO','ZEN_GO')                                     | NO   |     | GO                  |                |
| GamePlayers        | char(5)                                                           | NO   |     |                     |                |
| Ruleset            | enum('JAPANESE','CHINESE')                                        | NO   |     | JAPANESE            |                |
| Size               | tinyint(3) unsigned                                               | NO   | MUL | 19                  |                |
| Komi               | decimal(4,1)                                                      | NO   |     | 6.5                 |                |
| Handicap           | tinyint(3) unsigned                                               | NO   | MUL | 0                   |                |
| Status             | enum('SETUP','INVITED','PLAY','PASS','SCORE','SCORE2','FINISHED') | NO   | MUL | INVITED             |                |
| Moves              | smallint(5) unsigned                                              | NO   | MUL | 0                   |                |
| Black_Prisoners    | smallint(5) unsigned                                              | NO   |     | 0                   |                |
| White_Prisoners    | smallint(5) unsigned                                              | NO   |     | 0                   |                |
| Last_X             | tinyint(4)                                                        | NO   |     | -1                  |                |
| Last_Y             | tinyint(4)                                                        | NO   |     | -1                  |                |
| Last_Move          | char(2)                                                           | NO   |     |                     |                |
| Flags              | set('Ko','HiddenMsg','AdmResult')                                 | NO   | MUL |                     |                |
| Score              | decimal(5,1)                                                      | NO   | MUL | 0.0                 |                |
| Maintime           | smallint(6)                                                       | NO   |     | 0                   |                |
| Byotype            | enum('JAP','CAN','FIS')                                           | NO   |     | JAP                 |                |
| Byotime            | smallint(6)                                                       | NO   |     | 0                   |                |
| Byoperiods         | tinyint(4)                                                        | NO   |     | 0                   |                |
| Black_Maintime     | smallint(6)                                                       | NO   |     | 0                   |                |
| White_Maintime     | smallint(6)                                                       | NO   |     | 0                   |                |
| Black_Byotime      | smallint(6)                                                       | NO   |     | 0                   |                |
| White_Byotime      | smallint(6)                                                       | NO   |     | 0                   |                |
| Black_Byoperiods   | tinyint(4)                                                        | NO   |     | -1                  |                |
| White_Byoperiods   | tinyint(4)                                                        | NO   |     | -1                  |                |
| LastTicks          | int(11)                                                           | NO   |     | 0                   |                |
| ClockUsed          | smallint(6)                                                       | NO   | MUL | 0                   |                |
| TimeOutDate        | int(11)                                                           | NO   |     | 0                   |                |
| Rated              | enum('N','Y','Done')                                              | NO   |     | N                   |                |
| StdHandicap        | enum('N','Y')                                                     | NO   |     | N                   |                |
| WeekendClock       | enum('N','Y')                                                     | NO   |     | Y                   |                |
| Black_Start_Rating | double                                                            | NO   |     | -9999               |                |
| White_Start_Rating | double                                                            | NO   |     | -9999               |                |
| Black_End_Rating   | double                                                            | NO   |     | -9999               |                |
| White_End_Rating   | double                                                            | NO   |     | -9999               |                |
| Snapshot           | varchar(216)                                                      | NO   |     |                     |                |


## Fields:

* ID : primary key, games-ID

* Starttime : timestamp when game has started (clock starts ticking)
   - for invited game it's the creation date,
     which will be updated when the game actually starts

* Lastchanged : timestamp when there was a move-like change to the game
   - not changed on adding-time

* mid : foreign key to Messages.ID
   - field is 0 if game has been created using waiting-room
   - field is set, if game has been created by an invitation,
     then referring to the first invitation message

* DoubleGame_ID : foreign key to Games.ID
   - referring to other game if started as double-game

* Black_ID, White_ID : foreign key to Players.ID
   - representing current Black and White players

* ToMove_ID : foreign key to Players.ID
   - field-value points to player, that has to move next in game

* GameType : game-type, see also Waitingroom.GameType
   - GO = standard Go (1:1)
   - TEAM_GO = Team-Go (N:M) with N+M > 2, two teams of 1..N and 1..M players,
     each team has a fix color (B|W)
   - ZEN_GO = Multi-player Go (N) with odd N > 2, N players with switching colors

* GamePlayers : matching of players for game, see also Waitingroom.GamePlayers
   - format: "1:1" (Go), "N:M" (Team-Go), "N" (Zen-Go)
   - GameType is determined from GamePlayers-info
   - 1:1 | 2 = Go (standard Go)
   - N:M = Team-Go, N+M > 2, 2:2 = Rengo
   - N = Zen-Go, N > 2

   - IMPORTANT NOTE:
     When a MP-game is started (leaving SETUP-status), the 'GamePlayers'-fields
     may need to be updated into order 'B:W', which is needed for playing.
     see also: game_players.php#check_game_setup()

* Size, Komi, Handicap : settings for game (board-size, komi, handicap-stones)

* Status : current status for game
   - SETUP: game-entry is used to configure game-players for multi-player-game
   - INVITED: game-entry is used to hold game-settings for invitational game negotiation
   - PLAY: running game, playing mode
   - PASS: running game, player has passed (transition to scoring-step)
   - SCORE: running game, first player marks dead stones (scoring-step 1)
   - SCORE2: running game, second player marks dead stones (scoring-step 2)
   - FINISHED: finished game, game has finished, ratings adjusted eventually

* Moves : number of moves in game, including handicap-stones
   - for normal games (GameType=GO) if game is running:
     used as moves-counter including handicap-stones, pass-moves and score-steps

   - for multi-player-games (GameType<>GO) if Games.Status=SETUP:
     used as counter of joined players, shown on status-page in MP-games-list

   - for multi-player-games (GameType<>GO) if game is running:
     used as counter/cursor/index to check who is next to move
     - starts at 0, use modulo-counter using info from GamePlayers-field to find next
       player to move in GamePlayers-table
     - handicap-stones must be substracted

* Black_Prisoners, White_Prisoners : number of Black and White (stone) prisoners

* Last_X, Last_Y, Last_Move : ??

* Flags : game-flags indicating certain state of game
   - Ko: last move has taken a single stone, used to check for Ko
   - HiddenMsg: one of the game-messages contain a hidden message ("<h>...</h>")
   - AdmResult: game-result was set by admin

* Score : score of game for finished game
   - 0 = jigo
   - -1000, 1000 = Black(-1000)/White(1000) has won game by resignation
   - -2000, 2000 = Black(-2000)/White(2000) has won game by timeout

* Maintime, Byotype, Byotime, Byoperiods : time-settings for game
   - Maintime = main-time
   - Byotype = time-system (japanese, canadian, Fischer)
   - Byotime = extra-time for time-systems
   - Byoperiods = extra-periods for time-systems (japanese and canadian), 0 for Fischer

* Black_Maintime, Black_Byotime, Black_Byoperiods : current remaining time for Black player
   - Maintime = remaining main-time,
     if 0 byo-yomi has started for japanese and canadian time-systems
   - Byotime = remaining time of byo-yomi-period for japanese and canadian, 0 for Fischer
   - Byoperiods =
     - for japanese and canadian:
       -1 if byo-yomi not started yet, otherwise remaining number of byo-yomi periods
     - for Fischer always -1

* White_Maintime, White_Byotime, White_Byoperiods :
   - current remaining time for White player

* LastTicks : last-ticks (from ClockUsed) of current player, used for time-calculus

* ClockUsed : foreign key to Clock.ID, which clock to use for current player
   - can be normal clock (0-23), weekend-clock (100-123) or "vacation-clock" -1

* TimeOutDate : absolute "date" expressed in ticks aligned to Clock.ID=204,
   - used for remaining-time ordering for status-games

* Rated : game-setting
   - game is rated if field-value == 'Y', non-rated otherwise

* StdHandicap : game-setting
   - game uses standard handicap stones placement on setup-phase if value == 'Y',
     free handicap placement otherwise

* WeekendClock : time-setting for game
   - weekend-clock is running if field-value is 'Y'

* Black_Start_Rating, Black_End_Rating :
   - start and end rating of Black player for rated finished game

* White_Start_Rating, White_End_Rating :
   - start and end rating of White player for rated finished game

* Snapshot : base64-encoded snapshot of game-position
   - see 'include/classlib_game.php' in GameSnapshot::make_game_snapshot()-function


###########################################################################
## --- GamesPriority ---

Description:
   Table to be able to sort status-games by priority.
   - table-entries are only kept for RUNNING games
   - table-entries are deleted for finished games
   - table-entry only inserted on demand by user,
     there are games without GamesPriority-entries

| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| gid      | int(11)     | NO   | PRI | NULL    |       |
| uid      | int(11)     | NO   | PRI | NULL    |       |
| Priority | smallint(6) | NO   |     | 0       |       |


## Fields:

* gid : foreign key to Games.ID

* uid : foreign key to Players.ID

* Priority : integer-value with priority



###########################################################################
## --- GamePlayers ---

Description:
   Table to model multi-player-games like Team-Go and Zen-Go.
   - uid non-UNIQUE per game-id, allow to have same player more than once per group

| Field      | Type                         | Null | Key | Default | Extra          |
+------------+------------------------------+------+-----+---------+----------------+
| ID         | int(11)                      | NO   | PRI | NULL    | auto_increment |
| gid        | int(11)                      | NO   | MUL | NULL    |                |
| GroupColor | enum('B','W','G1','G2','BW') | NO   |     | BW      |                |
| GroupOrder | tinyint(4)                   | NO   |     | 0       |                |
| uid        | int(11)                      | NO   | MUL | 0       |                |
| Flags      | smallint(5) unsigned         | NO   |     | 0       |                |


## Fields:

* ID : primary key, game-player-ID
   - same uid allowed more than once per game-id, and so for delete we need PK
     to identify (single) correct entity

* gid : foreign key to Games.ID

* GroupColor : team/group-color of user for multi-player-game
   - BW = both colors (unset AND used for Zen-Go)
   - B = black-group
   - W = white-group
   - G1 = user in same group 1, but without assigned color
   - G2 = user in same group 2, but without assigned color

* GroupOrder : order within team/group
   - range: 1..n for each team/group
   - < 0 = inactive ex-group-member,
     replaced by admin on game-players request, e.g. if game is stalled

* uid : foreign key to Players.ID

* Flags : flags for game-player
   - see 'include/game_functions.php' GPFLAG_...



###########################################################################
## --- Moves ---

Description:
   - table storing all moves, setting-handicap, prisoners, PASS/SCORE-sequence,
     ADD-TIME-entries

Notes:
   - the number of records of Moves could be greater than the number of
     corresponding Games.Moves if:
      - there are prisoners
      - a sequence like PASS/PASS/SCORE.../RESUME had already occured.
      - time has been added to opponent

//FIXME(?) on game-end by time-out/resignation !???
/* To store the last $hours info (never used, to be checked)
         $to_move= ( $ToMove_ID == $Black_ID ? BLACK : WHITE );
         db_query( "clock_tick.update_moves($gid)",
            "INSERT INTO Moves SET " .
             "gid=$gid, " .
             "MoveNr=$Moves+1, " . //CAUTION: problem it's > Games.Moves
             "Stone=$to_move, " .
             "PosX=".POSX_TIME.", PosY=0, " .
             "Hours=$hours" );
         if( mysql_affected_rows() < 1 )
            error('mysql_insert_move', "clock_tick.update_moves($gid)");
*/

| Field  | Type                 | Null | Key | Default | Extra          |
+--------+----------------------+------+-----+---------+----------------+
| ID     | int(11)              | NO   | PRI | NULL    | auto_increment |
| gid    | int(11)              | NO   | MUL | NULL    |                |
| MoveNr | smallint(5) unsigned | NO   |     | NULL    |                |
| Stone  | tinyint(3) unsigned  | NO   |     | 0       |                |
| PosX   | tinyint(4)           | NO   |     | NULL    |                |
| PosY   | tinyint(4)           | NO   |     | NULL    |                |
| Hours  | smallint(5) unsigned | NO   |     | NULL    |                |


## Fields:

TODO TODO TODO



###########################################################################
## --- Shape ---

Description:
   Table to store shape-game boards.

| Field       | Type                | Null | Key | Default             | Extra          |
+-------------+---------------------+------+-----+---------------------+----------------+
| ID          | int(11)             | NO   | PRI | NULL                | auto_increment |
| uid         | int(11)             | NO   | MUL | NULL                |                |
| Name        | varchar(40)         | NO   |     |                     |                |
| Size        | tinyint(3) unsigned | NO   |     | NULL                |                |
| Flags       | tinyint(3) unsigned | NO   |     | 0                   |                |
| Notes       | text                | NO   |     | NULL                |                |
| Snapshot    | varchar(216)        | NO   |     |                     |                |
| Created     | datetime            | NO   |     | 0000-00-00 00:00:00 |                |
| Lastchanged | datetime            | NO   |     | 0000-00-00 00:00:00 |                |


## Fields:

* ID : primary key

* uid : foreign key to Players.ID

* Name : name of shape, given by user

* Size : board-size 5..25

* Flags : flags for shape
   - see 'include/game_functions.php' SHPFLAG_...
   - play-color-white, default black

* Snapshot : base64-encoded snapshot of game-position
   - see 'include/classlib_game.php' in GameSnapshot::make_game_snapshot()-function

* Notes : user-comment

* Created : creation-date of shape

* Lastchanged : date of last-update of shape

